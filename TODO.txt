[ ] see if way to have trait that just is iterable, then we can do blanket std::core::ops for each elem
[ ] interpolation
    [ ] what to do about reference and primitives and copy eg `f32` vs `Vec2`
    [ ] maybe organize interpolation traits into interpolation.rs or a folder?
[ ] list core::ops to impl for Vec3
    [x][ ] `+` Add (Vec3, Vec3)
    [x][ ] `+=` AddAssign (Vec3, Vec3)
    [x][ ] `-` Sub (Vec3, Vec3)
    [x][ ] `-=` SubAssign (Vec3, Vec3)
    [x][ ]`-` Neg (Vec3)
    // Scaling
    [x][ ] `*` Mul (Vec3, f32)
    [x][ ] `*=` MulAssign (Vec3, f32)
    [x][ ] `/` Div (Eg: Vec3, f32)
    [x][ ] `/=` DivAssign (Vec3, f32)
    [ ] Is there a way to do this for all Scalar? (eg f32, and f64)
[ ] list core::ops to impl for Point,Vec3
    [x][ ] `+` Add (Point, Vec3)
    [ ][ ] `+=` AddAssign (Point, Vec3)
    [ ][ ] `+` Sub (Point, Vec3)
    [ ][ ] `+=` SubAssign (Point, Vec3)
    // Scaling - scaling a position makes no sense
    // Invert - 
    [ ][ ] `-` Neg (Vec3)
    // Sub
    [ ][ ] `-` Sub (Point, Point) -> Vec3

[ ] For vectors it's just a vector in a coordinate space, and a point in a coordinate space
    
[ ] fix compilation warnings
